{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"emptyList\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", null, \" can't get screenList or screenList is empty.\", -1 /* HOISTED */);\nconst _hoisted_5 = [_hoisted_4];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return !$setup.isEmpty ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.serverList, server => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"screenList\",\n      key: server\n    }, [_createElementVNode(\"p\", null, \" 192.168.22.\" + _toDisplayString(server), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.screenList, screen => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: screen\n      }, [_createTextVNode(_toDisplayString(screen) + \" \", 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(screen[server], data => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: data.token,\n          onClick: $event => $setup.onclick(screen.token),\n          class: \"screenType\"\n        }, _toDisplayString(data.screenKind), 9 /* TEXT, PROPS */, _hoisted_2);\n      }), 128 /* KEYED_FRAGMENT */))]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _hoisted_5));\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_4","$setup","isEmpty","_createElementBlock","_hoisted_1","_Fragment","_renderList","serverList","server","key","_toDisplayString","screenList","screen","data","token","onClick","$event","onclick","screenKind","_hoisted_2","_hoisted_3","_hoisted_5"],"sources":["C:\\Users\\dennis.tsai\\Desktop\\log\\template\\src\\App.vue"],"sourcesContent":["<script setup>\n  import { ref } from 'vue'\n  import { getScreenList } from '@/util/getScreenList';\n  \n  let screenList = ref([])\n  let serverList = ref([99,100])\n  let isEmpty = ref(true)\n  \n  \n  getScreenList().then((data) => {\n    console.log(data)\n    // Object.keys(data).map((keys) => {\n    //   const obj = {} \n    //   obj[keys] = data[keys]\n    //   screenList.value.push(obj)\n    // })\n    screenList.value.push(data)\n    // screenList.value = data\n    console.log(screenList.value)\n    isEmpty.value = false\n  })\n  function onclick(token){\n    window.open(`http://192.168.22.99/player/${token}`)\n  }\n</script>\n<template>\n  <div\n    v-if=\"!isEmpty\"\n  >\n    <div class=\"screenList\"\n      v-for=\"server in serverList\"\n      :key=\"server\"\n    >\n      <p> 192.168.22.{{ server }}</p>\n      <div\n        v-for=\"screen in screenList\"\n        :key=\"screen\"\n      >\n        {{ screen }}\n        <div \n          v-for=\"data in screen[server]\"\n          :key=\"data.token\"\n          @click=\"onclick(screen.token)\"\n          class=\"screenType\"\n        >\n          {{ data.screenKind }}\n        </div>\n      </div>\n        \n    </div>\n  </div>\n  <div\n    v-else\n    class=\"emptyList\"\n  >\n    <span> can't get screenList or screenList is empty.</span>\n  </div>\n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.screenType {\n  display: inline-block;\n  padding: 2rem;\n  margin: 10px;\n  background-color: aliceblue;\n  border: 2px solid black;\n}\n\n.emptyList {\n  \n  span {\n    padding: 2rem;\n    background-color: indianred;\n  }\n}\n</style>\n"],"mappings":";;;;;;;EAqDIA,KAAK,EAAC;;gCAENC,mBAAA,CAA0D,cAApD,+CAA6C;oBAAnDC,UAA0D,C;;UA5BnDC,MAAA,CAAAC,OAAO,I,cADhBC,mBAAA,CAwBM,OAAAC,UAAA,I,kBArBJD,mBAAA,CAoBME,SAAA,QAAAC,WAAA,CAnBaL,MAAA,CAAAM,UAAU,EAApBC,MAAM;yBADfL,mBAAA,CAoBM;MApBDL,KAAK,EAAC,YAAY;MAEpBW,GAAG,EAAED;QAENT,mBAAA,CAA+B,WAA5B,cAAY,GAAAW,gBAAA,CAAGF,MAAM,mB,kBACxBL,mBAAA,CAaME,SAAA,QAAAC,WAAA,CAZaL,MAAA,CAAAU,UAAU,EAApBC,MAAM;2BADfT,mBAAA,CAaM;QAXHM,GAAG,EAAEG;MAAM,I,kCAETA,MAAM,IAAG,GACZ,kB,kBAAAT,mBAAA,CAOME,SAAA,QAAAC,WAAA,CANWM,MAAM,CAACJ,MAAM,GAArBK,IAAI;6BADbV,mBAAA,CAOM;UALHM,GAAG,EAAEI,IAAI,CAACC,KAAK;UACfC,OAAK,EAAAC,MAAA,IAAEf,MAAA,CAAAgB,OAAO,CAACL,MAAM,CAACE,KAAK;UAC5BhB,KAAK,EAAC;4BAEHe,IAAI,CAACK,UAAU,wBAAAC,UAAA;;;qDAM1BhB,mBAAA,CAKM,OALNiB,UAKM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}