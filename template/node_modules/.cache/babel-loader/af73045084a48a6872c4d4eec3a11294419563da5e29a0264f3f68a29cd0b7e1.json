{"ast":null,"code":"import { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"emptyList\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", null, \" can't get screenList or screenList is empty.\", -1);\nconst _hoisted_5 = [_hoisted_4];\nimport { ref } from 'vue';\nimport { getScreenList } from '@/util/getScreenList';\nexport default {\n  __name: 'App',\n  setup(__props) {\n    let screenList = ref([]);\n    let isEmpty = ref(true);\n    getScreenList().then(data => {\n      screenList.value = data;\n      isEmpty.value = false;\n    });\n    function onclick(token) {\n      window.open(`http://192.168.22.99/player/${token}`);\n    }\n    return (_ctx, _cache) => {\n      return !_unref(isEmpty) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(screenList), screenItem => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          class: \"screenList\",\n          key: screenItem.screenKind\n        }, [_createElementVNode(\"div\", {\n          onClick: $event => onclick(screenItem.token),\n          class: \"screenType\"\n        }, _toDisplayString(screenItem.screenKind), 9, _hoisted_2)]);\n      }), 128))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _hoisted_5));\n    };\n  }\n};","map":{"version":3,"names":["ref","getScreenList","screenList","isEmpty","then","data","value","onclick","token","window","open"],"sources":["C:/Users/dennis.tsai/Desktop/log/template/src/App.vue"],"sourcesContent":["<script setup>\n  import { ref } from 'vue'\n  import { getScreenList } from '@/util/getScreenList';\n  \n  let screenList = ref([])\n  let isEmpty = ref(true)\n  \n  \n  getScreenList().then((data) => {\n    \n    screenList.value = data\n    \n    isEmpty.value = false\n  })\n  function onclick(token){\n    window.open(`http://192.168.22.99/player/${token}`)\n  }\n</script>\n<template>\n  <div\n    v-if=\"!isEmpty\"\n  >\n    <div class=\"screenList\"\n      v-for=\"screenItem in screenList\"\n      :key=\"screenItem.screenKind\"\n    >\n      <div \n        @click=\"onclick(screenItem.token)\"\n        class=\"screenType\"\n      >\n        {{ screenItem.screenKind }}\n      </div>\n    </div>\n  </div>\n  <div\n    v-else\n    class=\"emptyList\"\n  >\n    <span> can't get screenList or screenList is empty.</span>\n  </div>\n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.screenType {\n  display: inline-block;\n  padding: 2rem;\n  margin: 10px;\n  background-color: aliceblue;\n  border: 2px solid black;\n}\n\n.emptyList {\n  \n  span {\n    padding: 2rem;\n    background-color: indianred;\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;AACE,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,aAAa,QAAQ,sBAAsB;;;;IAEpD,IAAIC,UAAU,GAAGF,GAAG,CAAC,EAAE,CAAC;IACxB,IAAIG,OAAO,GAAGH,GAAG,CAAC,IAAI,CAAC;IAGvBC,aAAa,CAAC,CAAC,CAACG,IAAI,CAAEC,IAAI,IAAK;MAE7BH,UAAU,CAACI,KAAK,GAAGD,IAAI;MAEvBF,OAAO,CAACG,KAAK,GAAG,KAAK;IACvB,CAAC,CAAC;IACF,SAASC,OAAOA,CAACC,KAAK,EAAC;MACrBC,MAAM,CAACC,IAAI,CAAE,+BAA8BF,KAAM,EAAC,CAAC;IACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}