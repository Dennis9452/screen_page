{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"divider\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: 1,\n  class: \"emptyList\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.serverList, server => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"screenList\",\n      key: server\n    }, [_createElementVNode(\"p\", null, \" 192.168.22.\" + _toDisplayString(server), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.screenList[server], screen => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: screen\n      }, [!screen.isEmpty ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(screen.data, data => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: data.token,\n          class: \"screenItem\"\n        }, [_createElementVNode(\"div\", null, \"ip : \" + _toDisplayString(data.ip), 1 /* TEXT */), _createElementVNode(\"div\", null, \"uuid : \" + _toDisplayString(data.uuid), 1 /* TEXT */), _createElementVNode(\"div\", null, \"screenKind : \" + _toDisplayString(data.screenKind), 1 /* TEXT */), _createElementVNode(\"div\", null, \"type : \" + _toDisplayString(data.type), 1 /* TEXT */), _createElementVNode(\"button\", {\n          class: \"screenType\",\n          onClick: $event => $setup.onclick(server, data.token)\n        }, \" Open \", 8 /* PROPS */, _hoisted_2)]);\n      }), 128 /* KEYED_FRAGMENT */)), _hoisted_3])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" can't get screen list from this server. \"))]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_Fragment","_renderList","$setup","serverList","server","key","_toDisplayString","screenList","screen","isEmpty","_hoisted_1","data","token","ip","uuid","screenKind","type","onClick","$event","onclick","_hoisted_2","_hoisted_3","_hoisted_4"],"sources":["C:\\Users\\dennis.tsai\\Desktop\\log\\template\\src\\App.vue"],"sourcesContent":["\n<script setup>\n  import { ref } from 'vue'\n  import { getScreenList } from '@/util/getScreenList';\n  \n  let screenList = ref({})\n  let serverList = ref(['99', '100'])\n  \n  serverList.value.map( (domainIp) => {\n    getScreenList(domainIp).then((data) => {\n      screenList.value[domainIp] = (data)\n    })\n  })\n  function onclick(server, token){\n    window.open(`http://192.168.22.${server}/player/${token}`)\n  }\n</script>\n<template>\n  \n    <div class=\"screenList\"\n      v-for=\"server in serverList\"\n      :key=\"server\"\n    >\n      <p> 192.168.22.{{ server }}</p>\n      \n      <div\n        v-for=\"screen in screenList[server]\"\n        :key=\"screen\"\n      >\n        <div\n          v-if=\"!screen.isEmpty\"\n        >\n          <div \n            v-for=\"data in screen.data\"\n            :key=\"data.token\"\n            class=\"screenItem\"\n          >\n            <div>ip : {{ data.ip }}</div>\n            <div>uuid : {{ data.uuid}}</div>\n            <div>screenKind : {{ data.screenKind}}</div>\n            <div>type : {{ data.type}}</div>\n            <button \n              class=\"screenType\"\n              @click=\"onclick(server, data.token)\"\n            > Open </button>\n          </div>\n          <div class=\"divider\"></div>\n        </div> \n        <div\n          v-else\n          class=\"emptyList\"\n        >\n          can't get screen list from this server.\n        </div>\n      </div>\n  </div>\n  \n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.divider{\n  border: 2px solid black;\n}\n\n.screen{\n  &Type {\n    padding: 2rem;\n    background-color: aliceblue;\n    border: 2px solid black;\n  }\n\n  &Item{\n    display: inline-block;\n    border: 2px solid black;\n    text-align: left;\n    padding: 1rem;\n    margin: 20px;\n  }\n}\n\n.emptyList {\n    background-color: indianred;\n    display: inline-block;\n    padding: 2rem;\n    margin: 10px;\n    border: 2px solid black;\n}\n</style>\n"],"mappings":";;;;;gCA8CUA,mBAAA,CAA2B;EAAtBC,KAAK,EAAC;AAAS;;;EAIpBA,KAAK,EAAC;;;2BA/BZC,mBAAA,CAoCIC,SAAA,QAAAC,WAAA,CAnCeC,MAAA,CAAAC,UAAU,EAApBC,MAAM;yBADfL,mBAAA,CAoCI;MApCCD,KAAK,EAAC,YAAY;MAEpBO,GAAG,EAAED;QAENP,mBAAA,CAA+B,WAA5B,cAAY,GAAAS,gBAAA,CAAGF,MAAM,mB,kBAExBL,mBAAA,CA6BMC,SAAA,QAAAC,WAAA,CA5BaC,MAAA,CAAAK,UAAU,CAACH,MAAM,GAA3BI,MAAM;2BADfT,mBAAA,CA6BM;QA3BHM,GAAG,EAAEG;MAAM,I,CAGHA,MAAM,CAACC,OAAO,I,cADvBV,mBAAA,CAkBM,OAAAW,UAAA,I,kBAfJX,mBAAA,CAaMC,SAAA,QAAAC,WAAA,CAZWO,MAAM,CAACG,IAAI,EAAnBA,IAAI;6BADbZ,mBAAA,CAaM;UAXHM,GAAG,EAAEM,IAAI,CAACC,KAAK;UAChBd,KAAK,EAAC;YAEND,mBAAA,CAA6B,aAAxB,OAAK,GAAAS,gBAAA,CAAGK,IAAI,CAACE,EAAE,kBACpBhB,mBAAA,CAAgC,aAA3B,SAAO,GAAAS,gBAAA,CAAGK,IAAI,CAACG,IAAI,kBACxBjB,mBAAA,CAA4C,aAAvC,eAAa,GAAAS,gBAAA,CAAGK,IAAI,CAACI,UAAU,kBACpClB,mBAAA,CAAgC,aAA3B,SAAO,GAAAS,gBAAA,CAAGK,IAAI,CAACK,IAAI,kBACxBnB,mBAAA,CAGgB;UAFdC,KAAK,EAAC,YAAY;UACjBmB,OAAK,EAAAC,MAAA,IAAEhB,MAAA,CAAAiB,OAAO,CAACf,MAAM,EAAEO,IAAI,CAACC,KAAK;WACnC,QAAM,iBAAAQ,UAAA,E;sCAETC,UAA2B,C,oBAE7BtB,mBAAA,CAKM,OALNuB,UAKM,EAFL,2CAED,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}