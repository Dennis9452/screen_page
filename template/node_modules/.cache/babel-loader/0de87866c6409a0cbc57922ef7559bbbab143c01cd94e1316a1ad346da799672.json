{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"screenList\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  class: \"screenType\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"emptyList\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.serverList, server => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"screenList\",\n      key: server\n    }, [_createElementVNode(\"p\", null, \" 192.168.22.\" + _toDisplayString(server), 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString($setup.screenList[server]) + \" \", 1 /* TEXT */), !$setup.screenList[server].isEmpty ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.screenList[server], screen => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: screen\n      }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(screen.data, data => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: data.token,\n          onClick: $event => $setup.onclick(server, data.token)\n        }, [_createElementVNode(\"p\", null, \"ip : \" + _toDisplayString(data.ip), 1 /* TEXT */), _createElementVNode(\"p\", null, \"uuid : \" + _toDisplayString(data.uuid), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, _toDisplayString(data.screenKind), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_2);\n      }), 128 /* KEYED_FRAGMENT */))]);\n    }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" can't get screen list from this server. \"))]);\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_renderList","$setup","serverList","server","key","_createElementVNode","_toDisplayString","screenList","isEmpty","_hoisted_1","screen","data","token","onClick","$event","onclick","ip","uuid","_hoisted_3","screenKind","_hoisted_4"],"sources":["C:\\Users\\dennis.tsai\\Desktop\\log\\template\\src\\App.vue"],"sourcesContent":["\n<script setup>\n  import { ref } from 'vue'\n  import { getScreenList } from '@/util/getScreenList';\n  \n  let screenList = ref({})\n  let serverList = ref(['99', '100'])\n  \n  serverList.value.map( (domainIp) => {\n    getScreenList(domainIp).then((data) => {\n      screenList.value[domainIp] = (data)\n    })\n  })\n  function onclick(server, token){\n    window.open(`http://192.168.22.${server}/player/${token}`)\n  }\n</script>\n<template>\n  \n    <div class=\"screenList\"\n      v-for=\"server in serverList\"\n      :key=\"server\"\n    >\n      <p> 192.168.22.{{ server }}</p>\n      {{ screenList[server] }}\n      <div\n          v-if=\"!screenList[server].isEmpty\"\n          class=\"screenList\"\n      >\n        <div\n          v-for=\"screen in screenList[server]\"\n          :key=\"screen\"\n        >\n            <div \n              v-for=\"data in screen.data\"\n              :key=\"data.token\"\n              @click=\"onclick(server, data.token)\"\n            >\n              <p>ip : {{ data.ip }}</p>\n              <p>uuid : {{ data.uuid}}</p>\n              <div class=\"screenType\"> {{ data.screenKind }} </div>\n            </div>\n        </div> \n      </div>\n      <div\n        v-else\n        class=\"emptyList\"\n      >\n        can't get screen list from this server.\n      </div>\n  </div>\n  \n</template>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.screen{\n  &Type {\n    display: inline-block;\n    padding: 2rem;\n    margin: 10px;\n    background-color: aliceblue;\n    border: 2px solid black;\n  }\n\n  &List {\n    display: inline-block;\n    border: 2px solid red;\n  }\n}\n\n.emptyList {\n    background-color: indianred;\n    display: inline-block;\n    padding: 2rem;\n    margin: 10px;\n    border: 2px solid black;\n}\n</style>\n"],"mappings":";;;EA2BUA,KAAK,EAAC;;;;EAaGA,KAAK,EAAC;AAAY;;;EAM7BA,KAAK,EAAC;;;2BA3BVC,mBAAA,CA+BIC,SAAA,QAAAC,WAAA,CA9BeC,MAAA,CAAAC,UAAU,EAApBC,MAAM;yBADfL,mBAAA,CA+BI;MA/BCD,KAAK,EAAC,YAAY;MAEpBO,GAAG,EAAED;QAENE,mBAAA,CAA+B,WAA5B,cAAY,GAAAC,gBAAA,CAAGH,MAAM,kB,iBAAO,GAC/B,GAAAG,gBAAA,CAAGL,MAAA,CAAAM,UAAU,CAACJ,MAAM,KAAI,GACxB,iB,CACWF,MAAA,CAAAM,UAAU,CAACJ,MAAM,EAAEK,OAAO,I,cADrCV,mBAAA,CAkBM,OAlBNW,UAkBM,I,kBAdJX,mBAAA,CAaMC,SAAA,QAAAC,WAAA,CAZaC,MAAA,CAAAM,UAAU,CAACJ,MAAM,GAA3BO,MAAM;2BADfZ,mBAAA,CAaM;QAXHM,GAAG,EAAEM;MAAM,K,kBAEVZ,mBAAA,CAQMC,SAAA,QAAAC,WAAA,CAPWU,MAAM,CAACC,IAAI,EAAnBA,IAAI;6BADbb,mBAAA,CAQM;UANHM,GAAG,EAAEO,IAAI,CAACC,KAAK;UACfC,OAAK,EAAAC,MAAA,IAAEb,MAAA,CAAAc,OAAO,CAACZ,MAAM,EAAEQ,IAAI,CAACC,KAAK;YAElCP,mBAAA,CAAyB,WAAtB,OAAK,GAAAC,gBAAA,CAAGK,IAAI,CAACK,EAAE,kBAClBX,mBAAA,CAA4B,WAAzB,SAAO,GAAAC,gBAAA,CAAGK,IAAI,CAACM,IAAI,kBACtBZ,mBAAA,CAAqD,OAArDa,UAAqD,EAAAZ,gBAAA,CAAzBK,IAAI,CAACQ,UAAU,iB;;uDAInDrB,mBAAA,CAKM,OALNsB,UAKM,EAFL,2CAED,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}