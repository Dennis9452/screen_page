{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"href\"];\nconst _hoisted_5 = {\n  key: 1,\n  class: \"emptyList\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", null, \"can't get screen list from this server.\", -1 /* HOISTED */);\nconst _hoisted_7 = [_hoisted_6];\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"divider\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.serverList, server => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"screenList\",\n      key: server\n    }, [_createElementVNode(\"p\", null, \" 192.168.22.\" + _toDisplayString(server), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.screenList[server], screen => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: screen\n      }, [!screen.isEmpty ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(screen.data, data => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: data.token,\n          class: \"screenItem\",\n          onClick: _withModifiers($event => $setup.onclick(server, data.token, $event), [\"self\", \"stop\"])\n        }, [_createElementVNode(\"div\", null, \"ip : \" + _toDisplayString(data.ip), 1 /* TEXT */), _createElementVNode(\"div\", null, \"uuid : \" + _toDisplayString(data.uuid), 1 /* TEXT */), _createElementVNode(\"div\", null, \"screenKind : \" + _toDisplayString(data.screenKind), 1 /* TEXT */), _createElementVNode(\"div\", null, \"type : \" + _toDisplayString(data.type), 1 /* TEXT */), _createElementVNode(\"div\", {\n          class: \"screenType\",\n          onClick: _withModifiers($event => $setup.onclick(server, data.token, $event), [\"stop\"])\n        }, [_createElementVNode(\"a\", {\n          href: $setup.getUrl(server, data.token)\n        }, \" Open \", 8 /* PROPS */, _hoisted_4)], 8 /* PROPS */, _hoisted_3)], 8 /* PROPS */, _hoisted_2);\n      }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _hoisted_7)), _hoisted_8]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_6","_createElementBlock","_Fragment","_renderList","$setup","serverList","server","key","_toDisplayString","screenList","screen","isEmpty","_hoisted_1","data","token","onClick","_withModifiers","$event","onclick","ip","uuid","screenKind","type","href","getUrl","_hoisted_4","_hoisted_5","_hoisted_7","_hoisted_8"],"sources":["C:\\Users\\dennis.tsai\\Desktop\\screen_page\\template\\src\\App.vue"],"sourcesContent":["\r\n<script setup>\r\n  import { ref } from 'vue'\r\n  import { getScreenList } from '@/util/getScreenList';\r\n  //test\r\n  let screenList = ref({})\r\n  let serverList = ref(['99', '100'])\r\n  serverList.value.map( (domainIp) => {\r\n    getScreenList(domainIp).then((data) => {\r\n      screenList.value[domainIp] = (data)\r\n    })\r\n  })\r\n  function onclick(server, token, event){\r\n    event.preventDefault()\r\n    window.open(`http://192.168.22.${server}/player/${token}`)\r\n  }\r\n\r\n  function getUrl(server, token){\r\n    return `http://192.168.22.${server}/player/${token}`\r\n  }\r\n</script>\r\n<template>\r\n  \r\n    <div class=\"screenList\"\r\n      v-for=\"server in serverList\"\r\n      :key=\"server\"\r\n    >\r\n      <p> 192.168.22.{{ server }}</p>\r\n      \r\n      <div\r\n        v-for=\"screen in screenList[server]\"\r\n        :key=\"screen\"\r\n      >\r\n        <div\r\n          v-if=\"!screen.isEmpty\"\r\n        >\r\n          <div \r\n            v-for=\"data in screen.data\"\r\n            :key=\"data.token\"\r\n            class=\"screenItem\"\r\n            @click.self.stop=\"onclick(server, data.token, $event)\"\r\n          >\r\n              <div>ip : {{ data.ip }}</div>\r\n              <div>uuid : {{ data.uuid }}</div>\r\n              <div>screenKind : {{ data.screenKind }}</div>\r\n              <div>type : {{ data.type}}</div>\r\n              <div \r\n                class=\"screenType\"\r\n                @click.stop=\"onclick(server, data.token, $event)\"\r\n              > \r\n                <a :href=\"getUrl(server, data.token)\"\r\n                > Open </a>\r\n              </div>\r\n          </div>\r\n        </div> \r\n        <div\r\n          v-else\r\n          class=\"emptyList\"\r\n        >\r\n          <div>can't get screen list from this server.</div>\r\n        </div>\r\n        <div class=\"divider\"></div>\r\n      </div>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<style lang=\"scss\">\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-top: 60px;\r\n}\r\n.divider{\r\n  border: 2px solid black;\r\n}\r\n\r\n.screen{\r\n  &Type {\r\n    margin: 10px 0;\r\n    background-color: aliceblue;\r\n    right: -140px;\r\n  }\r\n\r\n  &Item{\r\n    display: inline-block;\r\n    border: 2px solid black;\r\n    text-align: left;\r\n    padding: 1rem;\r\n    margin: 20px;\r\n\r\n    div {\r\n      padding: 10px 0 ;\r\n    }\r\n\r\n    .screenType{\r\n      padding: 1rem;\r\n      text-align: center;\r\n    }\r\n  }\r\n}\r\n\r\n.emptyList {\r\n    background-color: indianred;\r\n    display: inline-block;\r\n    padding: 2rem;\r\n    margin: 10px;\r\n    border: 2px solid black;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;EAyDUA,KAAK,EAAC;;gCAENC,mBAAA,CAAkD,aAA7C,yCAAuC;oBAA5CC,UAAkD,C;gCAEpDD,mBAAA,CAA2B;EAAtBD,KAAK,EAAC;AAAS;;;2BAtCxBG,mBAAA,CAwCIC,SAAA,QAAAC,WAAA,CAvCeC,MAAA,CAAAC,UAAU,EAApBC,MAAM;yBADfL,mBAAA,CAwCI;MAxCCH,KAAK,EAAC,YAAY;MAEpBS,GAAG,EAAED;QAENP,mBAAA,CAA+B,WAA5B,cAAY,GAAAS,gBAAA,CAAGF,MAAM,mB,kBAExBL,mBAAA,CAiCMC,SAAA,QAAAC,WAAA,CAhCaC,MAAA,CAAAK,UAAU,CAACH,MAAM,GAA3BI,MAAM;2BADfT,mBAAA,CAiCM;QA/BHM,GAAG,EAAEG;MAAM,I,CAGHA,MAAM,CAACC,OAAO,I,cADvBV,mBAAA,CAqBM,OAAAW,UAAA,I,kBAlBJX,mBAAA,CAiBMC,SAAA,QAAAC,WAAA,CAhBWO,MAAM,CAACG,IAAI,EAAnBA,IAAI;6BADbZ,mBAAA,CAiBM;UAfHM,GAAG,EAAEM,IAAI,CAACC,KAAK;UAChBhB,KAAK,EAAC,YAAY;UACjBiB,OAAK,EAAAC,cAAA,CAAAC,MAAA,IAAYb,MAAA,CAAAc,OAAO,CAACZ,MAAM,EAAEO,IAAI,CAACC,KAAK,EAAEG,MAAM;YAElDlB,mBAAA,CAA6B,aAAxB,OAAK,GAAAS,gBAAA,CAAGK,IAAI,CAACM,EAAE,kBACpBpB,mBAAA,CAAiC,aAA5B,SAAO,GAAAS,gBAAA,CAAGK,IAAI,CAACO,IAAI,kBACxBrB,mBAAA,CAA6C,aAAxC,eAAa,GAAAS,gBAAA,CAAGK,IAAI,CAACQ,UAAU,kBACpCtB,mBAAA,CAAgC,aAA3B,SAAO,GAAAS,gBAAA,CAAGK,IAAI,CAACS,IAAI,kBACxBvB,mBAAA,CAMM;UALJD,KAAK,EAAC,YAAY;UACjBiB,OAAK,EAAAC,cAAA,CAAAC,MAAA,IAAOb,MAAA,CAAAc,OAAO,CAACZ,MAAM,EAAEO,IAAI,CAACC,KAAK,EAAEG,MAAM;YAE/ClB,mBAAA,CACW;UADPwB,IAAI,EAAEnB,MAAA,CAAAoB,MAAM,CAAClB,MAAM,EAAEO,IAAI,CAACC,KAAK;WAClC,QAAM,iBAAAW,UAAA,E;yDAIfxB,mBAAA,CAKM,OALNyB,UAKM,EAAAC,UAAA,IACNC,UAA2B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}