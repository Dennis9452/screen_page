{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"emptyList\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", null, \" can't get screenList or screenList is empty.\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($setup.isEmpty) + \" \", 1 /* TEXT */), $setup.isEmpty ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.screenList, screenItem => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"screenList\",\n      key: screenItem.screenKind\n    }, [_createElementVNode(\"div\", {\n      onClick: $event => $setup.onclick(screenItem.token),\n      class: \"screenType\"\n    }, _toDisplayString(screenItem.screenKind), 9 /* TEXT, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _hoisted_3], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","$setup","isEmpty","_createElementBlock","_hoisted_1","_Fragment","_renderList","screenList","screenItem","key","screenKind","onClick","$event","onclick","token","_hoisted_2","_hoisted_3"],"sources":["C:\\Users\\dennis.tsai\\Desktop\\log\\template\\src\\App.vue"],"sourcesContent":["<script setup>\n  import { ref } from 'vue'\n  import axios from \"axios\"\n  // import { getScreenList } from '@/util/getScreenList';\n  \n  let screenList = ref([])\n  let isEmpty = ref(true)\n  \n  const getScreenList = () => {\n    return new Promise( (resolve) => {\n      axios.get('http://192.168.22.99/edgeReceive/deviceList')\n      .then( (response) => {\n        console.log(response)\n        if(response) {\n          resolve(response.data)\n          isEmpty.value = false\n        } \n        // screenList.value = response.data\n        \n      })\n      .catch( () => {\n        screenList.value = ['empty']\n      })\n        \n    })\n    \n  }\n  \n  getScreenList().then((data) => {\n    \n    screenList.value = data\n  })\n  function onclick(token){\n    window.open(`http://192.168.22.99/player/${token}`)\n  }\n</script>\n<template>\n  {{ isEmpty }}\n  <div\n    v-if=\"isEmpty\"\n  >\n    <div class=\"screenList\"\n      v-for=\"screenItem in screenList\"\n      :key=\"screenItem.screenKind\"\n    >\n      <div \n        @click=\"onclick(screenItem.token)\"\n        class=\"screenType\"\n      >\n        {{ screenItem.screenKind }}\n      </div>\n    </div>\n  </div>\n  <div\n    \n    class=\"emptyList\"\n  >\n    <span> can't get screenList or screenList is empty.</span>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;;;gCAqDEA,mBAAA,CAKM;EAHJC,KAAK,EAAC;AAAW,I,aAEjBD,mBAAA,CAA0D,cAApD,+CAA6C,E;;;+FApBlDE,MAAA,CAAAC,OAAO,IAAG,GACb,iBACQD,MAAA,CAAAC,OAAO,I,cADfC,mBAAA,CAcM,OAAAC,UAAA,I,kBAXJD,mBAAA,CAUME,SAAA,QAAAC,WAAA,CATiBL,MAAA,CAAAM,UAAU,EAAxBC,UAAU;yBADnBL,mBAAA,CAUM;MAVDH,KAAK,EAAC,YAAY;MAEpBS,GAAG,EAAED,UAAU,CAACE;QAEjBX,mBAAA,CAKM;MAJHY,OAAK,EAAAC,MAAA,IAAEX,MAAA,CAAAY,OAAO,CAACL,UAAU,CAACM,KAAK;MAChCd,KAAK,EAAC;wBAEHQ,UAAU,CAACE,UAAU,wBAAAK,UAAA,E;yEAI9BC,UAKM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}